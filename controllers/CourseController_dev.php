<?php

namespace app\controllers;

use app\models\Faq;
use Yii;
use app\models\Qa;
use app\models\Module;
use app\models\Theme;
use app\models\User;
use app\models\UserAnswer;
use app\models\UserDone;
use app\models\Question;
use Symfony\Component\Finder\Exception\AccessDeniedException;
use yii\helpers\ArrayHelper;
use yii\helpers\VarDumper;
use yii\web\ForbiddenHttpException;
use yii\web\MethodNotAllowedHttpException;
use yii\web\NotFoundHttpException;

class CourseController extends \yii\web\Controller
{

	public function beforeAction($action)
	{
		Module::$userId = \Yii::$app->user->id;
		Theme::$userId = \Yii::$app->user->id;
		return parent::beforeAction($action); // TODO: Change the autogenerated stub
	}

	public function actionIndex()
	{
		$modules = Module::find()->sort()->all();
		$user_done = UserDone::find()
            ->where('user_id='.\Yii::$app->user->id.' AND module_id=27')
            ->one();
		$question = UserAnswer::find()
            ->innerJoinWith('')
            ->where('user_id='.\Yii::$app->user->id.' AND module_id=27')
            ->all();
		//var_dump($theme);
		//exit();
		$pr_task = false;
		if($user_done){
            $pr_task = true;
        }
		return $this->render('index', [
			'modules' => $modules,
            'pr_task' => $pr_task
		]);
	}

	public function actionStudy()
	{
		if ($model = $this->getAwait(true)) {
			if (\Yii::$app->request->isPost) {
				(new UserDone([
					'user_id' => \Yii::$app->user->id,
					'module_id' => $model->module_id,
					'theme_id' => $model->id,
					'count_try' => 1,
				]))->save();
				if ($model->hasQuestions()) {
					return $this->redirect(['qa']);
				} else {
					$next = $this->getAwait(false);
					if ($next instanceof Module) {
						(new UserDone([
							'user_id' => \Yii::$app->user->id,
							'module_id' => $model->module_id,
							'theme_id' => null,
							'count_try' => 1,
						]))->save();
						return $this->redirect(['index']);
					}
					return $this->redirect(['study']);
				}
			}
			return $this->render('study', [
				'theme' => $model,
			]);
		}
		return $this->redirect(['index']);
	}

	public function actionQa()
	{
		if ($model = $this->getAwait(false)) {
			$qa = new Qa();
			$qa->model = $model;
			if ($qa->load(\Yii::$app->request->post()) && $qa->validate()) {
				$qa->saveResult();

				$params = [
					'user_id' => \Yii::$app->user->id,
				];
				if ($model instanceof Module) {
					$params['module_id'] = $model->id;
					$params['theme_id'] = null;
				} elseif ($model instanceof Theme) {
					$params['module_id'] = $model->module_id;
					$params['theme_id'] = $model->id;
				}

				$model = UserDone::find()->where($params)->one();
				if ($model) {
					$model->updateCounters(['count_try' => 1]);
				} else {
					$model = new UserDone(ArrayHelper::merge($params, [
						'count_try' => 1,
					]));
					$model->save();
				}

				$next = $this->getAwait(false);
				if ($next instanceof Module) {
					(new UserDone([
						'user_id' => \Yii::$app->user->id,
						'module_id' => $model->module_id,
						'theme_id' => null,
						'count_try' => 0,
					]))->save();
				}
				return $this->render('result', [
					'model' => $qa->model,
				]);
//				return $this->redirect(['index']);
			}
			
			if ($qa->load(\Yii::$app->request->post())) {
				if ($qa->answers) {
					foreach($qa->answers as $key => $answers) {
						if (!is_array($answers)) {
							$answers_out[$key] = $answers;
						}
					}
					$qa->answers = $answers_out;
				}
			}
			
			return $this->render('qa', [
				'model' => $model,
				'qa' => $qa,
			]);
		}
		return $this->redirect(['index']);
	}

	public function actionTry($module_id, $theme_id = null)
	{
		if (!empty($theme_id)) {
			$model = Theme::findOne([
				'id' => $theme_id,
				'module_id' => $module_id,
			]);
		} else {
			$model = Module::findOne([
				'id' => $module_id,
			]);
		}

		if (!$model) {
			throw new NotFoundHttpException('Тест не найден');
		}

		if (!$model->hasQuestions()) {
			throw new MethodNotAllowedHttpException('Вопросы для данного модуля/темы отсутствуют');
		}

		if (!$model->canGodPermission() && !$model->hasTry()) {
			throw new ForbiddenHttpException('Вы исчерпали все попытки пройти данный тест!');
		}
		$model::$userId = \Yii::$app->user->id;
		$qa = new Qa();
		$qa->model = $model;
		if ($qa->load(\Yii::$app->request->post()) && $qa->validate()) {
			UserAnswer::deleteAll([
				'module_id' => $module_id,
				'theme_id' => !empty($theme_id) ? $theme_id : null,
				'user_id' => \Yii::$app->user->id,
			]);
			$qa->saveResult();
			$model->incrTry();
			if ($model instanceof Module) {
//				$model->checkTestsResult();
			}
			return $this->redirect(['result', 'module_id' => $module_id, 'theme_id' => $theme_id]);
		}
		
		if ($qa->load(\Yii::$app->request->post())) {
			if ($qa->answers) {
				foreach($qa->answers as $key => $answers) {
					if (!is_array($answers)) {
						$answers_out[$key] = $answers;
					}
				}
				$qa->answers = $answers_out;
			}
		}
		
		return $this->render('try', [
			'model' => $model,
			'qa' => $qa,
		]);
	}

	public function actionResult($module_id, $theme_id = null)
	{
		$user_id = Yii::$app->user->id;
		$user = User::findOne(Yii::$app->user->id);
		Module::$userId = $user_id;
		Theme::$userId = $user_id;

		if (!empty($theme_id)) {
			$model = Theme::findOne([
				'id' => $theme_id,
				'module_id' => $module_id,
			]);
			$questions=Question::findAll([
				'theme_id' => $theme_id,
				'module_id' => $module_id,
				]);
		} else {
			$model = Module::findOne([
				'id' => $module_id,
			]);
			$questions=Question::findAll([
				
				'module_id' => $module_id,
				]);
		}

		return $this->render('result', [
			'model' => $model,
			'module' => Module::findOne(['id' => $module_id]),
			'qaBaseModel' => $model,
			'questions'=>$questions,
		]);
	}
	public function actionResult2($module_id, $theme_id = null)
	{
		$user_id = Yii::$app->user->id;
		$user = User::findOne(Yii::$app->user->id);
		Module::$userId = $user_id;
		Theme::$userId = $user_id;

		if (!empty($theme_id)) {
			$model = Theme::findOne([
				'id' => $theme_id,
				'module_id' => $module_id,
			]);
			$questions=Quesiton::findAll([
				'theme_id' => $theme_id,
				'module_id' => $module_id,
				]);
		} else {
			$model = Module::findOne([
				'id' => $module_id,
			]);
			$questions=Quesiton::findAll([
				
				'module_id' => $module_id,
				]);
		}

		return $this->render('result2', [
			'model' => $model,
			'module' => Module::findOne(['id' => $module_id]),
			'questions'=>$questions,
		]);
	}
	public function actionRemind($theme_id)
	{
		$model = Theme::find()->where(['id' => $theme_id])->one();
		/** @var Theme $model */
		if (!$model) {
			throw new NotFoundHttpException('Тема не найдена');
		}
		if (!$model->canGodPermission() && !$model->isChecked()) {
			throw new ForbiddenHttpException('У вас нет доступа к данной теме. Изучите темы в установленном порядке что бы получить доступ для повторного ознакомления.');
		}
		return $this->render('study', [
			'theme' => $model,
			'readOnly' => true,
		]);
	}

	/**
	 * @param bool $themeOnly
	 * @return Module|Theme|null
	 */
	protected function getAwait($themeOnly = true)
	{
		$modules = Module::find()->sort()->all();
		foreach ($modules as $module) {
			if ($module->hasAwait()) {
				foreach ($module->themes as $theme) {
					if ($theme->hasAwait()) {
						if (count($theme->themes) > 0) {
							foreach ($theme->themes as $t) {
								if ($t->hasAwait()) {
									return $t;
								}
							}
						}
						return $theme;
					}
				}
				if (!$themeOnly) {
					if ($module->hasAwait()) {
						return $module;
					}
				}
				continue;
			}
		}
		return null;
	}
}
