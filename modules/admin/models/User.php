<?php
/**
 * Created by PhpStorm.
 * User: User
 * Date: 26.07.2017
 * Time: 7:32
 */

namespace app\modules\admin\models;
use app\models\Question;
use app\models\Theme;
use app\models\UserDone;
use app\models\Module;
use yii\helpers\ArrayHelper;
use yii\helpers\VarDumper;
use yii\rbac\Role;

/**
 * Class User
 * @property $password virtual attribute
 * @package app\modules\admin\models
 */
class User extends \app\models\User
{
    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';

    /**
     * @inheritdoc
     */
    public function scenarios()
    {
        return [
            self::SCENARIO_CREATE => ['username', 'password', 'roles', 'fio', 'birthdate', 'city', 'job', 'job_position', 'groups'],
            self::SCENARIO_UPDATE => ['username', 'password', 'roles', 'fio', 'birthdate', 'city', 'job', 'job_position', 'groups'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            ['username', 'required'],
            ['roles', 'required', 'message' => 'Необходимо выбрать хотя бы одну роль'],
            ['password', 'required', 'on' => self::SCENARIO_CREATE],
            ['username', 'unique'],
            [['fio', 'city', 'job', 'job_position'], 'string'],
            [['birthdate', 'groups'], 'integer'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return ArrayHelper::merge(parent::attributeLabels(), [
            'password' => 'Пароль',
            'roles' => 'Роли',
            'doneModules' => 'Пройдено модулей',
            'doneThemes' => 'Пройдено тем',
            'doneTests' => 'Пройдено тестов',
            'fio' => 'ФИО',
            'birthdate' => 'Год рождения',
            'city' => 'Населенный пункт',
            'job' => 'Место работы',
            'job_position' => 'Должность',
            'groups' => 'Номера группы',
        ]);
    }

    /** @var string */
    protected $_password;

    /**
     * @inheritdoc
     * @param string $password
     */
    public function setPassword($password)
    {
        $this->generateAuthKey();
        parent::setPassword($password); // TODO: Change the autogenerated stub
        $this->_password = $password;
    }

    /**
     * @inheritdoc
     * @return string
     */
    public function getPassword()
    {
        return $this->_password;
    }

    /**
     * @param bool $insert
     * @param array $changedAttributes
     */
    public function afterSave($insert, $changedAttributes)
    {
        $this->updateAssignedRoles();
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /** @var null|array */
    protected $_roles = [];

    /**
     * @return array|null
     */
    public function getRoles()
    {
        if (!$this->_roles) {
            $this->_roles = array_map(function ($role) {
                /** @var Role $role */
                return $role->name;
            }, $this->authManager()->getRolesByUser($this->id));
        }
        return $this->_roles;
    }

    /**
     * @param array $value
     */
    public function setRoles($value)
    {
        $this->_roles = $value;
    }

    /**
     * Обновление назначенных ролей пользователя
     */
    protected function updateAssignedRoles()
    {
        $am = $this->authManager();
        $am->revokeAll($this->id);
        foreach ($this->_roles as $roleName) {
            if ($role = $am->getRole($roleName)) {
                $am->assign($role, $this->id);
            }
        }
    }

    /**
     * @return array
     */
    public function rolesList()
    {
        return ArrayHelper::map($this->authManager()->getRoles(), 'name', 'description');
    }

    /**
     * @return \yii\rbac\ManagerInterface
     */
    protected function authManager()
    {
        return \Yii::$app->authManager;
    }

    public static $totalModules;


    public function getUserDones()
    {
        return $this->hasMany(UserDone::className(), ['user_id' => 'id'])->andWhere(['theme_id' => null]);
    }

	public function getUserDonesNew()
	{
		return $this->hasMany(UserDone::className(), ['user_id' => 'id']);
	}

    public function getFailedModuleTests()
    {
        return $this->hasMany(UserDone::className(), ['user_id' => 'id'])->andWhere(['theme_id' => null, 'tests_failed' => true])->exists();
    }

    public function getDoneModules()
    {
        if (!self::$totalModules) {
            self::$totalModules = Module::find()->count();
        }
        $done = $this->hasMany(UserDone::className(), ['user_id' => 'id'])->andWhere(['theme_id' => null])->count();
        return $done . '/' . self::$totalModules;
    }

    public static $totalThemes;
    public function getDoneThemes()
    {
        if (!self::$totalThemes) {
            self::$totalThemes = Theme::find()->count();
        }
        $done = $this->hasMany(UserDone::className(), ['user_id' => 'id'])->andWhere('theme_id IS NOT NULL')->count();
        return $done . '/' . self::$totalThemes;
    }

    public static $totalTests;
    public function getDoneTests()
    {
        if (!self::$totalTests) {
            // TODO: загружает слишком много данных, упростить
            self::$totalTests =
                count(Theme::find()->innerJoinWith('questions', true)->select('theme.id')
                    ->asArray()->all())
                + count(Module::find()->innerJoinWith('questions', true)
                    ->asArray()->all());
        }
        $done = $this->hasMany(UserDone::className(), ['user_id' => 'id'])->andWhere('count_try > 0')->count();
        return $done . '/' . self::$totalTests;
    }
}